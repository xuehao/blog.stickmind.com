<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>薛浩的博客 - 追求卓越，宁静致远 - 笔记</title><link href="https://blog.stickmind.com/" rel="alternate"></link><link href="https://blog.stickmind.com/feeds/bi-ji.atom.xml" rel="self"></link><id>https://blog.stickmind.com/</id><updated>2021-06-30T07:04:00+08:00</updated><subtitle>To make your dreams happen</subtitle><entry><title>Roberts.CS1.C 库文件的使用</title><link href="https://blog.stickmind.com/how-to-use-roberts-cs1-c-zh-CN.html" rel="alternate"></link><published>2019-12-22T00:24:00+08:00</published><updated>2021-06-30T07:04:00+08:00</updated><author><name>xuehao</name></author><id>tag:blog.stickmind.com,2019-12-22:/how-to-use-roberts-cs1-c-zh-CN.html</id><summary type="html">&lt;p&gt;学习使用《C 语言的科学和艺术》 与 《C 程序设计的抽象思维》 两本书用到的库。&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;《C 语言的科学和艺术》&lt;/strong&gt; 与 &lt;strong&gt;《C 程序设计的抽象思维》&lt;/strong&gt; 两本书用到的库。&lt;/p&gt;
&lt;h2&gt;1. 如何编译库文件？&lt;/h2&gt;
&lt;p&gt;按如下步骤，创建一个个人 &lt;em&gt;root&lt;/em&gt; 系统（避免系统权限）以及两本书中用到的 &lt;em&gt;libcs.a&lt;/em&gt; 静态库。&lt;/p&gt;
&lt;p&gt;下载该仓库到个人电脑。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git clone https://github.com/xuehao/Roberts.CS1.C.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;进入 &lt;em&gt;cslib&lt;/em&gt; 文件夹。执行 &lt;em&gt;make&lt;/em&gt; 命令，生成库文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; Roberts.CS1.C &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; cslib
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果成功，此时会生成一个 &lt;em&gt;root&lt;/em&gt; 文件夹。复制 &lt;em&gt;root&lt;/em&gt; 文件到个人目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mv root ~ &lt;span class="c1"&gt;# 如果之前已经建立 root 系统，请手动复制对应目录文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2. 如何连接库文件？&lt;/h2&gt;
&lt;p&gt;把构建 C 程序用到的编译器选项和连接器选项打包放进通用 &lt;em&gt;Makefile&lt;/em&gt; 中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;CC = gcc
CFLAGS = -I&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/root/include/cs -g -Wall -std=gnu11 -O3
LDLIBS = -L&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/root/lib/ -lcs -lm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;em&gt;test-cslib&lt;/em&gt; 中的通用 &lt;em&gt;Makefile&lt;/em&gt; 文件编译 &lt;em&gt;house.c&lt;/em&gt; 测试程序，看看如何连接库文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; .. &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; test-cslib
$ make house
$ ./house
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此时会生成名为 &lt;em&gt;graphics.ps&lt;/em&gt; 的图像文件。&lt;/p&gt;</content><category term="笔记"></category><category term="C Programming"></category><category term="Computer Science"></category><category term="Data Structures"></category><category term="Algorithms"></category></entry><entry><title>搭建 C 的编程环境</title><link href="https://blog.stickmind.com/build-a-c-programming-environment.html" rel="alternate"></link><published>2019-12-21T00:13:00+08:00</published><updated>2019-12-18T22:06:00+08:00</updated><author><name>xuehao</name></author><id>tag:blog.stickmind.com,2019-12-21:/build-a-c-programming-environment.html</id><summary type="html">&lt;p&gt;学习搭建C语言编程环境，学习编译开源C程序库，利用现有代码解决问题。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;0. 目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;学习创建个人 &lt;em&gt;root&lt;/em&gt; 系统&lt;/li&gt;
&lt;li&gt;学习从源码编译常用程序库&lt;/li&gt;
&lt;li&gt;构建包含库的 C 程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1. 创建个人 root 系统&lt;/h2&gt;
&lt;p&gt;所谓的个人 &lt;em&gt;root&lt;/em&gt; 系统，其实就是避免把软件安装到系统路径。这样我们可以方便的查看 &lt;em&gt;root&lt;/em&gt; 目录下的文件，审查所安装软件的具体行为，而不必到系统目录中查找。创建个人 &lt;em&gt;root&lt;/em&gt; 系统还可以避免使用系统 &lt;em&gt;root&lt;/em&gt; 权限。&lt;sup id="sf-build-a-c-programming-environment-1-back"&gt;&lt;a href="#sf-build-a-c-programming-environment-1" class="simple-footnote" title="Ben Klemens. C 程序设计新思维, 第 2 版[M]. 赵岩, 译. 北京: 人民邮电出版社, 2018."&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;em&gt;root&lt;/em&gt; 系统目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir ~/root &lt;span class="c1"&gt;# 用于保存非系统程序库&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;将个人 &lt;em&gt;root&lt;/em&gt; 系统目录添加到系统路径：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/root/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt; &lt;span class="c1"&gt;# 以 zsh 举例，添加到 .zshrc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其实，这样的个人路径，在类似 &lt;em&gt;Ubuntu&lt;/em&gt; 的系统中已经默认存在了，即个人文件夹下的 &lt;code&gt;.local&lt;/code&gt; 目录。如果你愿意，完全可以使用该目录，而且不需要去修改系统路径。&lt;/p&gt;
&lt;h2&gt;2. 从源码编译程序库&lt;/h2&gt;
&lt;p&gt;学习 C 语言完全可以像学习 Python 那样，直接使用现成的库。在 C 语言几十年的发展过程中，除了标准库的更新外，还产生了无数质量上乘的第三方库。利用这些库，我们可以更愉快的编程了。&lt;/p&gt;
&lt;p&gt;下面会以 &lt;em&gt;GSL&lt;/em&gt; 库为例，介绍类似第三方库的安装和使用方法，为后续学习其他的库奠定基础。&lt;/p&gt;
&lt;p&gt;下载 &lt;code&gt;GSL&lt;/code&gt; 源码并编译安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ wget  http://mirrors.ustc.edu.cn/gnu/gsl/gsl-2.6.tar.gz
$ tar xvzf gsl-2.6.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; gsl-2.6
$ ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/root &lt;span class="c1"&gt;# 使用 prefix 参数指定安装目录&lt;/span&gt;
$ make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;该程序库将被添加到个人 &lt;em&gt;root&lt;/em&gt; 系统，可以去目录中查看具体安装了哪些东西。&lt;/p&gt;
&lt;h2&gt;3. 构建包含库的 C 程序&lt;/h2&gt;
&lt;p&gt;编写测试程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// 文件名：gsl_erf.c&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;        //erf, sqrt 等&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;       //printf 等&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;gsl/gsl_cdf.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;bottom_tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gsl_cdf_gaussian_P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;-1.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Area between [-1.96, 1.96]: %g&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bottom_tail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编写 &lt;em&gt;Makefile&lt;/em&gt; 文件，通过 &lt;em&gt;-I&lt;/em&gt; 指定库的头文件搜索路径；通过 &lt;em&gt;-L&lt;/em&gt; 指定库的搜索路径：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-I&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/root/include -g -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;gnu11 -O3
&lt;span class="nv"&gt;LDLIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-L&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/root/lib -lgsl -lgslcblas -lm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或者使用 &lt;em&gt;GSL&lt;/em&gt; 自带的配置信息，该命令会自动计算出相关的路径：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;gsl-config --cflags&lt;span class="sb"&gt;`&lt;/span&gt; -g -Wall -std&lt;span class="o"&gt;=&lt;/span&gt;gnu11 -O3
&lt;span class="nv"&gt;LDLIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;gsl-config --libs&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编译测试程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ make gsl_erf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Makefile&lt;/em&gt; 编译过程的套路一般为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置编译器选项的变量：&lt;em&gt;CFLAGS&lt;/em&gt; 为我们提供了编译器的一些选项&lt;/li&gt;
&lt;li&gt;设置连接器选项的变量：&lt;em&gt;LDLIBS&lt;/em&gt; 为我们提供了连接器的一些选项。&lt;/li&gt;
&lt;li&gt;使用 make 等工具将变量转换成真正的编译和连接的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;常用编译器选项&lt;/th&gt;
&lt;th align="center"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;-g&lt;/td&gt;
&lt;td align="center"&gt;加入调试符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;-Wall&lt;/td&gt;
&lt;td align="center"&gt;添加编译器警告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;-std=gun11&lt;/td&gt;
&lt;td align="center"&gt;编译器版本为 C11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;-O3&lt;/td&gt;
&lt;td align="center"&gt;优化等级为 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;-o&lt;/td&gt;
&lt;td align="center"&gt;指定输出的文件名，默认文件名为 a.out&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;常用连接器选项&lt;/th&gt;
&lt;th align="center"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;-I(大写的 i)&lt;/td&gt;
&lt;td align="center"&gt;添加头文件搜索路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;-L&lt;/td&gt;
&lt;td align="center"&gt;添加库文件搜索路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;-l(小写的 L)&lt;/td&gt;
&lt;td align="center"&gt;指定需要连接的库：&lt;code&gt;-lgsl&lt;/code&gt; 自动连接名为 libgsl.a 库&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;运行测试程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/root/lib:&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt; &lt;span class="c1"&gt;# 指定库路径&lt;/span&gt;
$ ./gsl_erf
Area between &lt;span class="o"&gt;[&lt;/span&gt;-1.96, &lt;span class="m"&gt;1&lt;/span&gt;.96&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;.950004
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对于运行时需要连接共享库的程序，和编译过程一样，同样需要指定库的路径，可以通过修改 &lt;em&gt;LD_LIBRARY_PATH&lt;/em&gt; 变量实现。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;参考文献:&lt;/em&gt;&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-build-a-c-programming-environment-1"&gt;Ben Klemens. C 程序设计新思维, 第 2 版[M]. 赵岩, 译. 北京: 人民邮电出版社, 2018. &lt;a href="#sf-build-a-c-programming-environment-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="笔记"></category><category term="C Programming"></category></entry><entry><title>程序设计和 C 语言的学习</title><link href="https://blog.stickmind.com/learning-programming-and-c.html" rel="alternate"></link><published>2019-12-18T22:06:00+08:00</published><updated>2019-12-18T22:06:00+08:00</updated><author><name>xuehao</name></author><id>tag:blog.stickmind.com,2019-12-18:/learning-programming-and-c.html</id><summary type="html">&lt;p&gt;什么是程序设计？程序设计课程主要学习哪些内容？C 语言又是什么？和程序设计又有什么关系？本文将来探讨这些问题。&lt;/p&gt;</summary><content type="html">&lt;p&gt;学习 C 语言的目的是学习 &lt;strong&gt;程序设计&lt;/strong&gt; 的基本原理。程序设计是一门用计算机解决问题的科学。&lt;/p&gt;
&lt;h2&gt;1. 程序设计学习方法论&lt;/h2&gt;
&lt;p&gt;在学习 C 语言的过程中，既要理解抽象的程序设计，又要了解 C 语言的细节，这就使学习过程陷入两难的困境。在深入 C 语言细节的学习之前，最好先对程序设计有一个感性的认识。试着从整体上去理解这些程序，而不要拘泥于 C 语言的一些细节。如果对程序设计一无所知而试图精通 C 语言，那么就会被 C 语言的细节所困扰。&lt;sup id="sf-learning-programming-and-c-1-back"&gt;&lt;a href="#sf-learning-programming-and-c-1" class="simple-footnote" title="Eric S. Roberts. C 语言的科学和艺术[M]. 翁惠玉等, 译. 北京: 机械工业出版社, 2011."&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;从长远来看，学习程序设计比学习具体的语言细节要重要的多。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;归约论&lt;/em&gt; 是一种哲学方法，它认为只有理解一个事物的每个组成部分后，才能更好的理解事物。&lt;em&gt;整体论&lt;/em&gt; 认为整体并非每一部分的简单叠加。&lt;/p&gt;
&lt;p&gt;在学习程序设计时，最好的方法是交替使用这两种视角。整体论有助于从整体上把握程序的作用，另一方面，在实际写程序时，归约论有助于理解程序是如何结合在一起的。&lt;/p&gt;
&lt;h2&gt;2. 如何写好程序？&lt;/h2&gt;
&lt;p&gt;任何程序，不管它看起来多么完美，总会有人会对它做一些修改。作为一个程序员，应该意识到程序后续维护的重要性。要减轻维护程序所需的工作，一个重要的途径就是提高程序的可读性。&lt;/p&gt;
&lt;p&gt;遵循以下一些规则，有助于写出较好的程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用注释解释那些复杂或难以理解的部分&lt;/li&gt;
&lt;li&gt;利用缩进区分程序的不同控制级别&lt;/li&gt;
&lt;li&gt;使用有意义的名字&lt;/li&gt;
&lt;li&gt;制定变量的命名规则，使读者能够从名字了解其功能&lt;/li&gt;
&lt;li&gt;尽量遵守广泛达成的一些约定&lt;/li&gt;
&lt;li&gt;避免使用不必要的复杂功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. C 语言学习的新思维&lt;/h2&gt;
&lt;p&gt;C 语言发展至今已经几十年了。C 语言及其相关的开发工具和环境也发生了天翻地覆的变化，学习 C 语言也应该与时俱进。&lt;sup id="sf-learning-programming-and-c-2-back"&gt;&lt;a href="#sf-learning-programming-and-c-2" class="simple-footnote" title="Ben Klemens. C 程序设计新思维, 第 2 版[M]. 赵岩, 译. 北京: 人民邮电出版社, 2018."&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;善于利用现有库学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似 Python 这样的脚本语言给编程带来了很多趣味性，其相关的一些编程思想也完全可以借鉴到 C 语言的学习过程中来。比如，我们可以直接使用提供了现成的链表和 XML 解析器的库，而没必要从头再写一次。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解你的操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习 C 语言大多会涉及到系统编程，而 C 语言和 POSIX 标准的系统有着不可分割的关系，所以一开始就了解 POSIX 系统，无疑对后续的学习大有裨益。对于 C 语言的学习，建议只在类 Unix 平台下练习。&lt;/p&gt;
&lt;p&gt;如果想对你使用的计算机系统有所了解，建议去看一下这本书：&lt;a href="https://book.douban.com/subject/26546893/"&gt;精通 Linux（第 2 版）&lt;/a&gt;。本书通俗易懂地讲解了 Linux 操作系统的工作机制以及运行 Linux 系统所需的常用工具和命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用 C 语言社区流行的开发工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分 C 语言书都是十几年前出版的老古董了，并且很少介绍现代 C 语言流行的开发工具和环境，大多是 C 语言的细节。这就造成大部分人学完 C 语言只能做些练习题，不能很快地融入到现今的 C 语言社区。&lt;/p&gt;
&lt;p&gt;所以，在学习的开始，我们就要采用 C 语言社区流行的开发工具。比如 Git 代码管理工具、CMake 构建工具、GDB 调试器、Valgrind 内存诊断工具、Doxygen 文档生成工具以及 Autotools 分发工具等&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;参考文献:&lt;/em&gt;&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-learning-programming-and-c-1"&gt;Eric S. Roberts. C 语言的科学和艺术[M]. 翁惠玉等, 译. 北京: 机械工业出版社, 2011. &lt;a href="#sf-learning-programming-and-c-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;li id="sf-learning-programming-and-c-2"&gt;Ben Klemens. C 程序设计新思维, 第 2 版[M]. 赵岩, 译. 北京: 人民邮电出版社, 2018. &lt;a href="#sf-learning-programming-and-c-2-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="笔记"></category><category term="Programming"></category><category term="Computer Science"></category></entry><entry><title>认识计算机科学</title><link href="https://blog.stickmind.com/what-is-computer-science.html" rel="alternate"></link><published>2019-12-17T21:06:00+08:00</published><updated>2019-12-17T21:06:00+08:00</updated><author><name>xuehao</name></author><id>tag:blog.stickmind.com,2019-12-17:/what-is-computer-science.html</id><summary type="html">&lt;p&gt;什么是计算机科学？当谈论计算机科学时，我们主要关心的是什么？本文将来探讨这些问题。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. 什么是计算机科学？&lt;/h2&gt;
&lt;p&gt;对于汽车的技术，我们称之为“汽车工程”或“汽车技术”，但对于计算机的技术，我们称之为 &lt;em&gt;计算机科学&lt;/em&gt; （computer science）。之所以与众不同，是因为现代计算机是一种通用的机器，具备执行许多任务的潜力，但必须对其进行 &lt;em&gt;编程&lt;/em&gt; （programming）才能挖掘出那份潜力。&lt;sup id="sf-what-is-computer-science-1-back"&gt;&lt;a href="#sf-what-is-computer-science-1" class="simple-footnote" title="Eric S. Roberts. C 语言的科学和艺术[M]. 翁惠玉等, 译. 北京: 机械工业出版社, 2011."&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;当谈论计算机科学时，我们主要关心的是计算机软件领域，更重要的是抽象问题的解决领域。所以，最好将计算机科学看作是解决问题的科学，而解决问题正巧也离不开计算机。&lt;/p&gt;
&lt;h2&gt;2. 什么是算法？&lt;/h2&gt;
&lt;p&gt;由于计算机科学是在计算机的帮助下解决问题的科学，所以我们应该了解 &lt;em&gt;算法&lt;/em&gt;（algorithm）的概念，这个概念无论对计算机科学还是针对解决问题的抽象学科来说，都是基础。&lt;/p&gt;
&lt;p&gt;要成为一个算法，解决问题的技术必须满足三个基本条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须有清楚有效的定义形式&lt;/li&gt;
&lt;li&gt;每一步都切实可行&lt;/li&gt;
&lt;li&gt;可以在有限步骤后得到结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. 程序设计语言和编译&lt;/h2&gt;
&lt;p&gt;用计算机解决问题，包括两个概念上的不同步骤。首先是 &lt;em&gt;算法设计&lt;/em&gt; （algorithm design），可以构造一个新的算法或从已有的解决方案中挑选一个。其次是 &lt;em&gt;编码&lt;/em&gt; （coding），使用程序设计语言将算法表达为程序。&lt;/p&gt;
&lt;p&gt;在构造新算法时，最好先用自然语言说明这种算法。然后在用类似 C 语言这样的程序设计语言，将算法转换为真实可行的程序。&lt;/p&gt;
&lt;p&gt;像 C 语言这样的程序设计语言，都被计算机科学家称之为 &lt;em&gt;高级语言&lt;/em&gt; （higher-level language）的实例。这些语言的设计不受特定计算机影响，而是通用的算法概念，这种概念可以运行于任何一个计算机系统。而在计算机内部，每种计算机都有其能理解的特定的低级语言，称之为 &lt;em&gt;机器语言&lt;/em&gt; （machine language）。这种低级语言由硬件类型决定。&lt;/p&gt;
&lt;p&gt;要想让 C 程序这样的高级语言在不同的计算机上运行，我们需要将高级语言翻译为机器语言，这样的翻译工具称之为 &lt;em&gt;编译器&lt;/em&gt; （compiler）。&lt;/p&gt;
&lt;p&gt;C 语言的编译过程可以用下图来表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展名为 &lt;code&gt;.c&lt;/code&gt; 的文本文件，称为 C 语言的 &lt;em&gt;源文件&lt;/em&gt; （source file）&lt;/li&gt;
&lt;li&gt;编译器将源文件转换生成的中间文件，称为 &lt;em&gt;目标文件&lt;/em&gt; （object file）&lt;/li&gt;
&lt;li&gt;目标文件及其他目标文件（即 &lt;em&gt;库&lt;/em&gt;（library），预定义的目标文件）组成在系统上可运行的文件，称为 &lt;em&gt;可执行文件&lt;/em&gt; （executable file）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Compile Process" src="https://blog.stickmind.com/cs106a/images/compile-process.jpg"&gt;&lt;/p&gt;
&lt;p&gt;其中，将独立的目标文件组合成一个可执行文件的过程，称为 &lt;em&gt;链接&lt;/em&gt; （linking）。&lt;/p&gt;
&lt;h2&gt;4. 编程错误和调试&lt;/h2&gt;
&lt;p&gt;程序设计语言和人类语言类似，有其规定的 &lt;em&gt;语法规则&lt;/em&gt; （syntax rule）。违反语法规则而产生的错误称为 &lt;em&gt;语法错误&lt;/em&gt; （syntax error）。另外一种错误是，程序符合语法规则，但依然没有给出正确答案，对于这种错误，我们称为 &lt;em&gt;逻辑错误&lt;/em&gt; （bug）。&lt;/p&gt;
&lt;p&gt;找出并改正逻辑错误的过程，称为 &lt;em&gt;调试&lt;/em&gt; （debugging），该过程同样使用编译器来完成。&lt;/p&gt;
&lt;h2&gt;5. 软件维护和软件工程&lt;/h2&gt;
&lt;p&gt;软件需要维护，通常有两个主要因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使经过大量调试，软件依然可能存在错误&lt;/li&gt;
&lt;li&gt;为满足新的需求，程序功能需要增强&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了便于人们后续理解程序并维护编程，发展出了另一门学科，称为 &lt;em&gt;软件工程&lt;/em&gt; （software engineering）。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;参考文献：&lt;/em&gt;&lt;/p&gt;&lt;ol class="simple-footnotes"&gt;&lt;li id="sf-what-is-computer-science-1"&gt;Eric S. Roberts. C 语言的科学和艺术[M]. 翁惠玉等, 译. 北京: 机械工业出版社, 2011. &lt;a href="#sf-what-is-computer-science-1-back" class="simple-footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content><category term="笔记"></category><category term="Computer Science"></category></entry></feed>